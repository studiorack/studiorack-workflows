name: Dplug workflow

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      dir_build:
        default: ./build
        required: false
        type: string
      dir_sdk:
        default: ./sdk
        required: false
        type: string
      dir_source:
        default: ./sdk/examples/clipit
        required: false
        type: string
      release_id:
        required: true
        type: string
      release_url:
        required: true
        type: string
      target:
        default: VST3
        required: false
        type: string
      type:
        default: Release
        required: false
        type: string

jobs:
  dplug:
    name: Dplug
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: linux
            generator: Unix Makefiles
            path: ${{ inputs.dir_source }}/builds/Linux-64b-VST3
            file: Witty Audio CLIP It.vst3
          - os: macos-latest
            name: mac
            generator: Xcode
            path: ${{ inputs.dir_source }}/builds/macOS-64b-VST3
            file: Witty Audio CLIP It.vst3
          - os: windows-latest
            name: win
            generator: Visual Studio 16 2019
            path: ${{ inputs.dir_source }}/builds/Windows-64b-VST3
            file: Witty Audio CLIP It-64.vst3
    steps:
      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ldc-1.17.0

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build plugins
        run: |
          export LDC_VSDIR="$(pwd)/LDC_VSDIR"
          cd ${{ inputs.dir_sdk }}/tools/dplug-build
          dub build
          cd ../../../
          cd ${{ inputs.dir_source }}
          ../../tools/dplug-build/dplug-build -c ${{ inputs.target }} -a x86_64

      - name: List files
        run: ls "${{ matrix.path }}"

      - name: Metadata
        run: |
          npm install @studiorack/cli -g
          cp -v ./src/assets/* "${{ matrix.path }}"
          studiorack validate "${{ matrix.path }}/**/*.{vst,vst3}" --files --json --txt --zip --summary

      - name: Upload
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ inputs.release_id }}';
            for (let file of await fs.readdirSync('${{ matrix.path }}')) {
              if (path.extname(file) === '.zip') {
                console.log('upload zip', `${{ matrix.path }}/${file}`);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: `${path.basename(file, path.extname(file))}-${{ matrix.name }}.zip`,
                  data: await fs.readFileSync(`${{ matrix.path }}/${file}`)
                });
                if ("${{ matrix.os }}" == 'macos-latest') {
                  console.log('upload png', `${{ matrix.path }}/${path.basename(file, path.extname(file))}.png`);
                  await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: `${path.basename(file, path.extname(file))}.png`,
                    data: await fs.readFileSync(`${{ matrix.path }}/${path.basename(file, path.extname(file))}.png`)
                  });
                  console.log('upload wav', `${{ matrix.path }}/${path.basename(file, path.extname(file))}.wav`);
                  await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: `${path.basename(file, path.extname(file))}.wav`,
                    data: await fs.readFileSync(`${{ matrix.path }}/${path.basename(file, path.extname(file))}.wav`)
                  });
                }
              }
            }

      - name: Upload metadata
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.release_url }}
          asset_path: ${{ matrix.path }}/plugins.json
          asset_name: plugins.json
          asset_content_type: application/json
