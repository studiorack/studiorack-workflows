name: Clap workflow

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      dir_build:
        default: ./build
        required: false
        type: string
      dir_sdk:
        default: ./sdk
        required: false
        type: string
      dir_source:
        default: ./sdk
        required: false
        type: string
      release_id:
        required: true
        type: string
      release_url:
        required: true
        type: string
      target:
        default: clap-tests
        required: false
        type: string
      type:
        default: Release
        required: false
        type: string

jobs:
  steinberg:
    name: Clap
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: linux
            generator: Ninja Multi-Config
            path: ${{ inputs.dir_build }}/${{ inputs.type }}
          - os: macos-latest
            name: mac
            generator: Ninja Multi-Config
            path: ${{ inputs.dir_build }}/${{ inputs.type }}
          - os: windows-latest
            name: win
            generator: Ninja Multi-Config
            path: ${{ inputs.dir_build }}/${{ inputs.type }}
    steps:
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update && sudo apt upgrade && sudo apt install
          build-essential gperf ninja-build cmake
          libgl1-mesa-dev
          libfontconfig1-dev
          libfreetype6-dev
          libx11-dev
          libx11-xcb-dev
          libxcb-damage0-dev
          libxcb-dpms0-dev
          libxcb-glx0-dev
          libxcb-icccm4-dev
          libxcb-image0-dev
          libxcb-keysyms1-dev
          libxcb-present-dev
          libxcb-randr0-dev
          libxcb-record0-dev
          libxcb-render-util0-dev
          libxcb-render0-dev
          libxcb-res0-dev
          libxcb-shape0-dev
          libxcb-shm0-dev
          libxcb-sync-dev
          libxcb-util-dev
          libxcb-xfixes0-dev
          libxcb-xinerama0-dev
          libxcb-xkb-dev
          libxcb1-dev
          libxext-dev
          libxfixes-dev
          libxi-dev
          libxkbcommon-dev
          libxkbcommon-x11-dev
          libxrender-dev
          libatspi2.0-dev

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install automake autoconf ninja cmake

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: choco install cmake zip ninja

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build plugins
        run: |
          cmake \
            -G "${{ matrix.generator }}" \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=true \
            -DCLAP_BUILD_TESTS=true \
            -S "${{ inputs.dir_source }}" \
            -B "${{ inputs.dir_build }}"
          cmake --build "${{ inputs.dir_build }}" --config "${{ inputs.type }}" --target "${{ inputs.target }}"

      - name: List files
        run: ls "${{ matrix.path }}"

      - name: Metadata
        run: |
          npm install @studiorack/cli -g
          cp -v ./src/assets/* "${{ matrix.path }}"
          studiorack validate "${{ matrix.path }}/**/*.{clap}" --files --json --txt --zip --summary

      - name: Upload
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ inputs.release_id }}';
            for (let file of await fs.readdirSync('${{ matrix.path }}')) {
              if (path.extname(file) === '.zip') {
                console.log('upload zip', `${{ matrix.path }}/${file}`);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: `${path.basename(file, path.extname(file))}-${{ matrix.name }}.zip`,
                  data: await fs.readFileSync(`${{ matrix.path }}/${file}`)
                });
                if ("${{ matrix.os }}" == 'macos-latest') {
                  console.log('upload png', `${{ matrix.path }}/${path.basename(file, path.extname(file))}.png`);
                  await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: `${path.basename(file, path.extname(file))}.png`,
                    data: await fs.readFileSync(`${{ matrix.path }}/${path.basename(file, path.extname(file))}.png`)
                  });
                  console.log('upload wav', `${{ matrix.path }}/${path.basename(file, path.extname(file))}.wav`);
                  await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: `${path.basename(file, path.extname(file))}.wav`,
                    data: await fs.readFileSync(`${{ matrix.path }}/${path.basename(file, path.extname(file))}.wav`)
                  });
                }
              }
            }
      # - name: Upload metadata
      #   if: matrix.os == 'macos-latest'
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ inputs.release_url }}
      #     asset_path: ${{ matrix.path }}/plugins.json
      #     asset_name: plugins.json
      #     asset_content_type: application/json
