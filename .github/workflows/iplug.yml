name: iPlug workflow

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      dir_build:
        default: ./build
        required: false
        type: string
      dir_source:
        default: ./sdk
        required: false
        type: string
      release_id:
        required: true
        type: string
      release_url:
        required: true
        type: string
      target:
        default: all
        required: false
        type: string
      type:
        default: Release
        required: false
        type: string

jobs:
  iplug:
    name: iPlug
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: linux
            generator: Unix Makefiles
            path: ${{ inputs.dir_build }}
          - os: macos-latest
            name: mac
            generator: Xcode
            path: ${{ inputs.dir_build }}/${{ inputs.type }}
          - os: windows-latest
            name: win
            generator: Visual Studio 16 2019
            path: ${{ inputs.dir_build }}
    steps:
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install cmake gcc "libstdc++6" libx11-xcb-dev libxcb-util-dev libxcb-cursor-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libfontconfig1-dev libcairo2-dev libgtkmm-3.0-dev libsqlite3-dev libxcb-keysyms1-dev libasound2-dev libpulse-dev libjack-dev libxcb-icccm4-dev gobjc gobjc++ gnustep gnustep-devel clang libobjc-10-dev zenity

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install cmake

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: choco install cmake zip

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup
        shell: bash
        run: |
          cp -v -r ./src/Examples/* ${{ inputs.dir_source }}/Examples
          cp -v ./src/download-iplug-sdks.sh ${{ inputs.dir_source }}/Dependencies/IPlug
          cp -v ${{ inputs.dir_source }}/Examples/IPlugInstrument/resources/fonts/Roboto-Regular.ttf ${{ inputs.dir_source }}/Examples/IPlugInstrument/resources
          cd ${{ inputs.dir_source }}/Dependencies/IPlug &&  ./download-iplug-sdks.sh && cd ../../..
          cd ${{ inputs.dir_source }}/Dependencies &&  ./download-prebuilt-libs.sh && cd ../..

      - name: Build plugins
        run: |
          cmake \
            -G "${{ matrix.generator }}" \
            -DCMAKE_BUILD_TYPE="${{ inputs.type }}" \
            -S "${{ inputs.dir_source }}" \
            -B "${{ inputs.dir_build }}"
          cmake --build "${{ inputs.dir_build }}" --config "${{ inputs.type }}" --target "${{ inputs.target }}"

      - name: List files
        run: ls ${{ matrix.path }}

      - name: Metadata
        run: |
          npm install @studiorack/cli -g
          cp -v ./src/assets/* "${{ matrix.path }}"
          studiorack validate "${{ matrix.path }}/**/*.{vst,vst3}" --files --json --txt --zip --summary

      - name: Upload
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ inputs.release_id }}';
            for (let file of await fs.readdirSync('${{ matrix.path }}')) {
              if (path.extname(file) === '.zip') {
                console.log('upload zip', `${{ matrix.path }}/${file}`);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: `${path.basename(file, path.extname(file))}-${{ matrix.name }}.zip`,
                  data: await fs.readFileSync(`${{ matrix.path }}/${file}`)
                });
                if ("${{ matrix.os }}" == 'macos-latest') {
                  console.log('upload png', `${{ matrix.path }}/${path.basename(file, path.extname(file))}.png`);
                  await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: `${path.basename(file, path.extname(file))}.png`,
                    data: await fs.readFileSync(`${{ matrix.path }}/${path.basename(file, path.extname(file))}.png`)
                  });
                  console.log('upload wav', `${{ matrix.path }}/${path.basename(file, path.extname(file))}.wav`);
                  await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: `${path.basename(file, path.extname(file))}.wav`,
                    data: await fs.readFileSync(`${{ matrix.path }}/${path.basename(file, path.extname(file))}.wav`)
                  });
                }
              }
            }

      - name: Upload metadata
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.release_url }}
          asset_path: ${{ matrix.path }}/plugins.json
          asset_name: plugins.json
          asset_content_type: application/json
