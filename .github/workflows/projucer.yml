name: Projucer workflow

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      dir_build:
        default: ./build
        required: false
        type: string
      dir_source:
        default: ./src/AudioPluginDemo
        required: false
        type: string
      file_name:
        default: AudioPluginDemo
        required: false
        type: string
      release_id:
        required: true
        type: string
      release_url:
        required: true
        type: string
      target:
        default: all
        required: false
        type: string
      type:
        default: Release
        required: false
        type: string

jobs:
  projucer:
    name: Projucer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: linux
            generator: Unix Makefiles
            source: ${{ inputs.dir_source }}/Builds/LinuxMakefile
            path: ${{ inputs.dir_source }}/Builds/LinuxMakefile/build
            projucer_bin: ./JUCE/Projucer
            projucer_type: linux
          - os: macos-latest
            name: mac
            generator: Xcode
            source: ${{ inputs.dir_source }}/Builds/MacOSX
            path: ${{ inputs.dir_source }}/Builds/MacOSX/build/Release
            projucer_bin: ./JUCE/Projucer.app/Contents/MacOS/Projucer
            projucer_type: osx
          - os: windows-latest
            name: win
            generator: Visual Studio 16 2019
            source: ${{ inputs.dir_source }}/Builds/VisualStudio2017
            path: ${{ inputs.dir_source }}/Builds/VisualStudio2017/x64/Debug/VST3
            projucer_bin: ./JUCE/Projucer.exe
            projucer_type: windows
    steps:
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev libjack-jackd2-dev

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install cmake

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build (Projucer)
        run: |
          curl -L https://github.com/juce-framework/JUCE/releases/download/6.0.8/juce-6.0.8-${{ matrix.projucer_type }}.zip --output jucesdk.zip
          unzip jucesdk.zip
          ${{ matrix.projucer_bin }} --set-global-search-path ${{ matrix.projucer_type }} defaultJuceModulePath ./JUCE/modules
          ${{ matrix.projucer_bin }} --resave "${{ inputs.dir_source }}/${{ inputs.file_name }}.jucer"

      - name: Build Linux plugin (Projucer)
        if: matrix.os == 'ubuntu-latest'
        working-directory: ${{ matrix.source }}
        run: make -j4 VERBOSE=1 CONFIG="${{ inputs.type }}"

      - name: Build macOS plugin (Projucer)
        if: matrix.os == 'macos-latest'
        working-directory: ${{ matrix.source }}
        run: xcodebuild ARCHS=x86_64 -project ${{ inputs.file_name }}.xcodeproj -configuration "${{ inputs.type }}" -jobs 4

      - name: Build Windows plugin (Projucer)
        if: matrix.os == 'windows-latest'
        working-directory: ${{ matrix.source }}
        run: msbuild.exe -v:normal ${{ inputs.file_name }}.sln

      - name: List files
        run: ls "${{ matrix.path }}"

      - name: Metadata
        run: |
          npm install @studiorack/cli -g
          cp -v ./src/assets/* "${{ matrix.path }}"
          studiorack validate "${{ matrix.path }}/**/*.{vst,vst3}" --files --json --txt --zip --summary

      - name: Upload
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ inputs.release_id }}';
            for (let file of await fs.readdirSync('${{ matrix.path }}')) {
              if (path.extname(file) === '.zip') {
                console.log('upload zip', `${{ matrix.path }}/${file}`);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: `${path.basename(file, path.extname(file))}-${{ matrix.name }}.zip`,
                  data: await fs.readFileSync(`${{ matrix.path }}/${file}`)
                });
                if ("${{ matrix.os }}" == 'macos-latest') {
                  console.log('upload png', `${{ matrix.path }}/${path.basename(file, path.extname(file))}.png`);
                  await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: `${path.basename(file, path.extname(file))}.png`,
                    data: await fs.readFileSync(`${{ matrix.path }}/${path.basename(file, path.extname(file))}.png`)
                  });
                  console.log('upload wav', `${{ matrix.path }}/${path.basename(file, path.extname(file))}.wav`);
                  await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: `${path.basename(file, path.extname(file))}.wav`,
                    data: await fs.readFileSync(`${{ matrix.path }}/${path.basename(file, path.extname(file))}.wav`)
                  });
                }
              }
            }

      - name: Upload metadata
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.release_url }}
          asset_path: ${{ matrix.path }}/plugins.json
          asset_name: plugins.json
          asset_content_type: application/json
